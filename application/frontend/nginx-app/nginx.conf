events {
    worker_connections 1024;
    }
    
http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    sendfile        on;
    keepalive_timeout  65;
        
        # Proxy settings for backend API
    upstream backend {
    server api-service.webapp.svc.cluster.local:80;
    }
        
    server {
        listen       80;
        server_name  localhost;
        root         /usr/share/nginx/html;
        index        index.html;
            
            # Serve static frontend content
        location / {
                try_files \$uri \$uri/ /index.html;
                add_header Cache-Control "no-cache, must-revalidate";
        }
            
            # Proxy API requests to backend service
        location /api/ {
                proxy_pass http://backend/;
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto \$scheme;
                
                # CORS headers for API access
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
                
                # Handle preflight requests
                if (\$request_method = 'OPTIONS') {
                    add_header 'Access-Control-Allow-Origin' '*';
                    add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                    add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                    add_header 'Access-Control-Max-Age' 1728000;
                    add_header 'Content-Type' 'text/plain; charset=utf-8';
                    add_header 'Content-Length' 0;
                    return 204;
                }
            }
            
            # Health check endpoint
            location /health {
                access_log off;
                return 200 "Frontend healthy\n";
                add_header Content-Type text/plain;
            }
        }
    }